spring.application.name=identify-server

server.port=20099

server.ssl.bundle=identify-server
server.ssl.client-auth=want

 # PostgreSQL Database Connection
spring.datasource.url=jdbc:postgresql://localhost:5432/sc_agent_identity
spring.datasource.username=root
spring.datasource.password=pwd124
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true



logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.security.oauth2.server=DEBUG

# SSL Bundle Configuration
#spring.ssl.bundle.jks.identify-server.key.alias=identify-server
spring.ssl.bundle.jks.identify-server.key.password=123123
spring.ssl.bundle.jks.identify-server.keystore.location=classpath:server-keystore.p12
spring.ssl.bundle.jks.identify-server.keystore.password=123123
spring.ssl.bundle.jks.identify-server.keystore.type=PKCS12
spring.ssl.bundle.jks.identify-server.truststore.location=classpath:server-truststore.p12
spring.ssl.bundle.jks.identify-server.truststore.password=123123
spring.ssl.bundle.jks.identify-server.truststore.type=PKCS12

# OAuth2 Client Registration
spring.security.oauth2.client.registration.google-idp.provider=google
spring.security.oauth2.client.registration.google-idp.client-id=${GOOGLE_CLIENT_ID:google-client-id}
spring.security.oauth2.client.registration.google-idp.client-secret=${GOOGLE_CLIENT_SECRET:google-client-secret}
spring.security.oauth2.client.registration.google-idp.scope=openid,https://www.googleapis.com/auth/userinfo.profile,https://www.googleapis.com/auth/userinfo.email
spring.security.oauth2.client.registration.google-idp.client-name=Sign in with Google


# OAuth2 Provider Configuration
spring.security.oauth2.client.provider.google.user-name-attribute=email
spring.security.oauth2.client.provider.github.user-name-attribute=login